<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (C) 2007 The Android Open Source Project
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
          http://www.apache.org/licenses/LICENSE-2.0
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">

<!-- Bluetooth. -->

     <!-- Boolean indicating if current platform supports HFP inband ringing -->
     <bool name="config_bluetooth_hfp_inband_ringing_support">true</bool>

     <!-- Boolean indicating if current platform supports BLE peripheral mode -->
     <bool name="config_bluetooth_le_peripheral_mode_supported">true</bool>

<!-- WiFi/Network. -->

    <!-- Whether WiFi display is supported by this device.
         There are many prerequisites for this feature to work correctly.
         Here are a few of them:
         * The WiFi radio must support WiFi P2P.
         * The WiFi radio must support concurrent connections to the WiFi display and
           to an access point.
         * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
           remote submix module.  This module is used to record and stream system
           audio output to the WiFi display encoder in the media server.
         * The remote submix module "audio.r_submix.default" must be installed on the device.
         * The device must be provisioned with HDCP keys (for protected content).
    -->
     <bool name="config_enableWifiDisplay">true</bool>

      <!-- When true, the tethering upstream network follows the current default
         Internet network (except when the current default network is mobile,
         in which case a DUN network will be used if required). -->
     <bool name="config_tether_upstream_automatic">true</bool>

     <!-- Boolean indicating whether single radio chain scan results are to be used for network selection -->
     <bool name="config_wifi_framework_use_single_radio_chain_scan_results_network_selection">true</bool>

     <!-- Boolean indicating if restoring network selection should be skipped -->
     <!-- The restoring is handled by modem if it is true-->
     <bool name="skip_restoring_network_selection">false</bool>

     <!-- Wlan configs -->
     <string name="config_qualified_networks_service_package">vendor.qti.iwlan</string>
     <string name="config_wlan_data_service_package">vendor.qti.iwlan</string>
     <string name="config_wlan_network_service_package">vendor.qti.iwlan</string>

    <!-- Integer parameters of the wifi to cellular handover feature
         wifi should not stick to bad networks -->
     <integer name="config_wifi_framework_wifi_score_bad_rssi_threshold_24GHz">-83</integer>
     <integer name="config_wifi_framework_wifi_score_bad_rssi_threshold_5GHz">-80</integer>
     <integer name="config_wifi_framework_wifi_score_low_rssi_threshold_24GHz">-73</integer>
     <integer name="config_wifi_framework_wifi_score_low_rssi_threshold_5GHz">-70</integer>

    <!-- Configure wifi tcp buffersizes in the form:
         rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max -->
     <string name="config_wifi_tcp_buffers">524288,1048576,8808040,262144,524288,6710886</string>

    <!-- Regex of wired ethernet ifaces -->
     <string name="config_ethernet_iface_regex">eth\\d</string>

    <!-- Array of ConnectivityManager.TYPE_xxxx values allowable for tethering -->
    <!-- Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH -->
    <integer-array name="config_tether_upstream_types">
        <item>1</item>
        <item>0</item>
        <item>5</item>
        <item>7</item>
    </integer-array>

    <!-- An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx],
         [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet]  -->
    <!-- the 5th element "resore-time" indicates the number of milliseconds to delay
         before automatically restore the default connection.  Set -1 if the connection
         does not require auto-restore. -->
    <!-- the 6th element indicates boot-time dependency-met value. -->
    <string-array name="networkAttributes">
        <item>wifi,1,1,1,-1,true</item>
        <item>mobile,0,0,0,-1,true</item>
        <item>mobile_mms,2,0,4,300000,true</item>
        <item>mobile_supl,3,0,2,300000,true</item>
        <item>mobile_dun,4,0,2,300000,true</item>
        <item>mobile_hipri,5,0,3,300000,true</item>
        <item>mobile_fota,10,0,2,300000,true</item>
        <item>mobile_ims,11,0,2,300000,true</item>
        <item>mobile_cbs,12,0,2,300000,true</item>
        <item>bluetooth,7,7,2,-1,true</item>
        <item>ethernet,9,9,4,-1,true</item>
    </string-array>

<!-- Ril. -->

    <!-- Number of physical SIM slots on the device. This includes both eSIM and pSIM slots, and
         is not necessarily the same as the number of phones/logical modems supported by the device.
         For example, a multi-sim device can have 2 phones/logical modems, but 3 physical slots,
         or a single SIM device can have 1 phones/logical modems, but 2 physical slots (one eSIM
         and one pSIM) -->
    <integer name="config_num_physical_slots">2</integer>

    <!-- Is the device capable of hot swapping an ICC Card -->
     <bool name="config_hotswapCapable">true</bool>

    <!-- Config determines whether to update phone object when voice registration
         state changes. Voice radio tech change will always trigger an update of
         phone object irrespective of this config -->
     <bool name="config_switch_phone_on_voice_reg_state_change">true</bool>

    <!-- This string array should be overridden by the device to present a list of radio
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware -->
    <!-- An Array of "[ConnectivityManager connectionType],
                  [# simultaneous connection types]"  -->
    <string-array name="radioAttributes">
        <item>1,1</item>
        <item>0,1</item>
        <item>7,1</item>
        <item>9,1</item>
    </string-array>

    <!-- The default peak refresh rate for a given device. Change this value if you want to allow
         for higher refresh rates to be automatically used out of the box -->
     <integer name="config_defaultPeakRefreshRate">90</integer>

    <!-- Flag specifying whether WFC over IMS should be available for carrier: independent of
         carrier provisioning. If false: hard disabled. If true: then depends on carrier
         provisioning, availability etc -->
     <bool name="config_carrier_wfc_ims_available">true</bool>

    <!-- Set to true to add links to Cell Broadcast app from Settings and MMS app. -->
     <bool name="config_cellBroadcastAppLinks">true</bool>

    <!-- Flag specifying whether VoLTE is available on device -->
     <bool name="config_device_volte_available">true</bool>

    <!-- Flag specifying whether VoLTE should be available for carrier: independent of
         carrier provisioning. If false: hard disabled. If true: then depends on carrier
         provisioning, availability etc -->
     <bool name="config_carrier_volte_available">true</bool>
     <bool name="config_carrier_volte_tty_supported">true</bool>

    <!-- Flag specifying whether VT is available on device -->
     <bool name="config_device_vt_available">true</bool>

    <!-- Package name for the call-based number verification app -->
    <string name="platform_number_verification_package" translatable="false">com.google.android.gms</string>

    <string-array name="config_locationProviderPackageNames" translatable="false">
        <!-- The Google provider -->
        <item>com.google.android.gms</item>
        <!-- The standard AOSP fused location provider -->
        <item>com.android.location.fused</item>
    </string-array>
    
    <!-- Flag indicating which package name can access the persistent data partition -->
    <string name="config_persistentDataPackageName" translatable="false">com.google.android.gms</string>

<!-- Screen. -->

    <!-- The bounding path of the cutout region of the main built-in display.
         Must either be empty if there is no cutout region, or a string that is parsable by
         {@link android.util.PathParser}.
         The path is assumed to be specified in display coordinates with pixel units and in
         the display's native orientation, with the origin of the coordinate system at the
         center top of the display.
         To facilitate writing device-independent emulation overlays, the marker `@dp` can be
         appended after the path string to interpret coordinates in dp instead of px units.
         Note that a physical cutout should be configured in pixels for the best results.
         Example for a 10px x 10px square top-center cutout:
                <string ...>M -5,0 L -5,10 L 5,10 L 5,0 Z</string>
         Example for a 10dp x 10dp square top-center cutout:
                <string ...>M -5,0 L -5,10 L 5,10 L 5,0 Z @dp</string>
         @see https://www.w3.org/TR/SVG/paths.html#PathData
         -->
     <string translatable="false" name="config_mainBuiltInDisplayCutout">M -903,0 H -1080 V 90 H -903 V 0 Z@right</string>

    <!-- Like config_mainBuiltInDisplayCutout, but this path is used to report the
         one single bounding rect per device edge to the app via
         {@link DisplayCutout#getBoundingRect}. Note that this path should try to match the visual
         appearance of the cutout as much as possible, and may be smaller than
         config_mainBuiltInDisplayCutout
         -->
     <string translatable="false" name="config_mainBuiltInDisplayCutoutRectApproximation">
         M -903,0 H -1080 V 90 H -903 V 0 Z@right
     </string>

    <!-- Height of the status bar in portrait -->
     <dimen name="status_bar_height_portrait">74px</dimen>

    <!-- Height of the status bar in landscape -->
     <dimen name="status_bar_height_landscape">24dp</dimen>

    <!-- Radius of the software rounded corners at the top of the display in its natural
        orientation. If zero, the value of rounded_corner_radius is used. -->
     <dimen name="rounded_corner_radius_top">110px</dimen>

    <!-- Radius of the software rounded corners at the bottom of the display in its natural
        orientation. If zero, the value of rounded_corner_radius is used. -->
     <dimen name="rounded_corner_radius_bottom">110px</dimen>

    <!-- If true, the display will be shifted around in ambient mode. -->
     <bool name="config_enableBurnInProtection">true</bool>

    <!-- Specifies the maximum burn-in offset displacement from the center. If -1, no maximum value
         will be used. -->
     <integer name="config_burnInProtectionMaxRadius">70</integer>

    <!-- Specifies the minimum burn-in offset horizontally. -->
     <integer name="config_burnInProtectionMinHorizontalOffset">-15</integer>

    <!-- Specifies the maximum burn-in offset horizontally. -->
     <integer name="config_burnInProtectionMaxHorizontalOffset">15</integer>

    <!-- Specifies the minimum burn-in offset vertically. -->
     <integer name="config_burnInProtectionMinVerticalOffset">-40</integer>

    <!-- Specifies the maximum burn-in offset vertically. -->
     <integer name="config_burnInProtectionMaxVerticalOffset">40</integer>

    <!-- Power Management: Specifies whether to decouple the interactive state of the
         device from the display on/off state.
         When false, setInteractive(..., true) will be called before the display is turned on
         and setInteractive(..., false) will be called after the display is turned off.
         This mode provides best compatibility for devices that expect the interactive
         state to be tied to the display state.
         When true, setInteractive(...) will be called independently of whether the display
         is being turned on or off.  This mode enables the power manager to reduce
         clocks and disable the touch controller while the display is on.
         This resource should be set to "true" when a doze component has been specified
         to maximize power savings but not all devices support it.
         Refer to power.h for details.
    -->
     <bool name="config_powerDecoupleInteractiveModeFromDisplay">false</bool>

<!-- Brightness. -->

   <!-- Flag indicating whether we should enable the automatic brightness.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
     <bool name="config_automatic_brightness_available">true</bool>

   <!-- Control whether Night display is available. This should only be enabled on devices
    that have a HWC implementation that can apply the matrix passed to setColorTransform
    without impacting power, performance, and app compatibility (e.g. protected content). -->
     <bool name="config_nightDisplayAvailable">true</bool>

    <!-- Note: This setting is deprecated, please use
    config_screenBrightnessSettingMinimumFloat instead -->
    <integer name="config_screenBrightnessSettingMinimum">2</integer>

    <!-- Note: This setting is deprecated, please use
    config_screenBrightnessSettingMaximumFloat instead -->
    <integer name="config_screenBrightnessSettingMaximum">255</integer>

    <!-- Note: This setting is deprecated, please use
    config_screenBrightnessSettingDefaultFloat instead -->
    <integer name="config_screenBrightnessSettingDefault">102</integer>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N  1 zones as follows:
         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1     array[N] <= LUX < infinity
         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>1</item>
        <item>2</item>
        <item>4</item>
        <item>6</item>
        <item>8</item>
        <item>10</item>
        <item>15</item>
        <item>20</item>
        <item>25</item>
        <item>30</item>
        <item>35</item>
        <item>40</item>
        <item>45</item>
        <item>50</item>
        <item>55</item>
        <item>60</item>
        <item>65</item>
        <item>70</item>
        <item>75</item>
        <item>80</item>
        <item>85</item>
        <item>90</item>
        <item>95</item>
        <item>100</item>
        <item>120</item>
        <item>140</item>
        <item>160</item>
        <item>180</item>
        <item>200</item>
        <item>220</item>
        <item>240</item>
        <item>260</item>
        <item>280</item>
        <item>300</item>
        <item>320</item>
        <item>340</item>
        <item>360</item>
        <item>380</item>
        <item>400</item>
        <item>420</item>
        <item>440</item>
        <item>460</item>
        <item>480</item>
        <item>500</item>
        <item>700</item>
        <item>900</item>
        <item>1100</item>
        <item>1300</item>
        <item>1500</item>
        <item>1700</item>
        <item>1900</item>
        <item>2000</item>
        <item>2500</item>
        <item>3000</item>
        <item>3500</item>
        <item>4000</item>
        <item>4500</item>
    </integer-array>

    <!-- Array of desired screen brightness in nits corresponding to the lux values
         in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
         config_screenBrightnessMaximumNits, the display brightness is defined as the measured
         brightness of an all-white image.
         If this is defined then:
            - config_autoBrightnessLcdBacklightValues should not be defined
            - config_screenBrightnessNits must be defined
            - config_screenBrightnessBacklight must be defined
         This array should have size one greater than the size of the config_autoBrightnessLevels
         array. The brightness values must be non-negative and non-decreasing. This must be
         overridden in platform specific overlays -->
    <array name="config_autoBrightnessDisplayValuesNits">
        <item>5</item>
        <item>5</item>
        <item>5</item>
        <item>17</item>
        <item>24</item>
        <item>31</item>
        <item>34</item>
        <item>46</item>
        <item>59</item>
        <item>76</item>
        <item>81</item>
        <item>82</item>
        <item>82</item>
        <item>82</item>
        <item>83</item>
        <item>83</item>
        <item>83</item>
        <item>84</item>
        <item>84</item>
        <item>85</item>
        <item>85</item>
        <item>85</item>
        <item>85</item>
        <item>86</item>
        <item>86</item>
        <item>87</item>
        <item>89</item>
        <item>90</item>
        <item>91</item>
        <item>93</item>
        <item>94</item>
        <item>96</item>
        <item>97</item>
        <item>99</item>
        <item>100</item>
        <item>101</item>
        <item>104</item>
        <item>105</item>
        <item>106</item>
        <item>108</item>
        <item>109</item>
        <item>111</item>
        <item>112</item>
        <item>114</item>
        <item>116</item>
        <item>137</item>
        <item>157</item>
        <item>180</item>
        <item>205</item>
        <item>226</item>
        <item>257</item>
        <item>280</item>
        <item>295</item>
        <item>369</item>
        <item>434</item>
        <item>500</item>
        <item>500</item>
        <item>500</item>
    </array>

      <!-- An array describing the screen's backlight values corresponding to the brightness
         values in the config_screenBrightnessNits array.
         This array should be equal in size to config_screenBrightnessBacklight. -->
    <integer-array name="config_screenBrightnessBacklight">
        <item>1</item>
        <item>255</item>
    </integer-array>

    <!-- An array of floats describing the screen brightness in nits corresponding to the backlight
         values in the config_screenBrightnessBacklight array.  On OLED displays these  values
         should be measured with an all white image while the display is in the fully on state.
         Note that this value should *not* reflect the maximum brightness value for any high
         brightness modes but only the maximum brightness value obtainable in a sustainable manner.
         This array should be equal in size to config_screenBrightnessBacklight -->
    <array name="config_screenBrightnessNits">
        <item>2.0</item>
        <item>500.0</item>
    </array>
<!-- Led. -->

    <!-- Whether device has notification LED -->
    <bool name="config_hasNotificationLed">false</bool>

<!-- Doze. -->

    <!-- Control whether the always on display mode is available. This should only be enabled on
         devices where the display has been tuned to be power efficient in DOZE and/or DOZE_SUSPEND
         states. -->
     <bool name="config_dozeAlwaysOnDisplayAvailable">true</bool>

    <!-- Control whether the always on display mode is enabled by default. This value will be used
         during initialization when the setting is still null. -->
     <bool name="config_dozeAlwaysOnEnabled">false</bool>

    <!-- ComponentName of a dream to show whenever the system would otherwise have
         gone to sleep.  When the PowerManager is asked to go to sleep, it will instead
         try to start this dream if possible.  The dream should typically call startDozing()
         to put the display into a low power state and allow the application processor
         to be suspended.  When the dream ends, the system will go to sleep as usual.
         Specify the component name or an empty string if none.
         Note that doze dreams are not subject to the same start conditions as ordinary dreams.
         Doze dreams will run whenever the power manager is in a dozing state. -->
     <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>

    <!-- Indicate whether to allow the device to suspend when the screen is off
         due to the proximity sensor.  This resource should only be set to true
         if the sensor HAL correctly handles the proximity sensor as a wake-up source.
         Otherwise, the device may fail to wake out of suspend reliably.
         The default is false. -->
      <bool name="config_suspendWhenScreenOffDueToProximity">false</bool>

    <!-- Screen brightness used to dim the screen while dozing in a very low power state.
         May be less than the minimum allowed brightness setting
         that can be set by the user. -->
     <integer name="config_screenBrightnessDoze">10</integer>

    <!-- If true, the doze component is not started until after the screen has been
         turned off and the screen off animation has been performed. -->
     <bool name="config_dozeAfterScreenOffDefault">true</bool>

    <!-- Whether the display blanks itself when transitioning from a doze to a non-doze state -->
     <bool name="config_displayBlanksAfterDoze">false</bool>

    <!-- Default value for proximity check on screen wake
     NOTE ! - Enable for devices that have a fast response proximity sensor (ideally < 300ms)
    -->
    <bool name="config_proximityCheckOnWake">true</bool>
    <integer name="config_proximityCheckTimeout">3000</integer>
    <bool name="config_proximityCheckOnWakeEnabledByDefault">true</bool>

<!-- Buttons. -->

    <!-- Whether a software navigation bar should be shown. NOTE: in the future this may be
         autodetected from the Configuration. -->
     <bool name="config_showNavigationBar">true</bool>

    <!-- If this is true, long press on power button will be available from the non-interactive state -->
     <bool name="config_supportLongPressPowerWhenNonInteractive">true</bool>

    <!-- Vibrator pattern for a very short but reliable vibration for soft keyboard tap -->
    <integer-array name="config_keyboardTapVibePattern">
        <item>100</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about a long screen/key press -->
    <integer-array name="config_longPressVibePattern">
        <item>49</item>
        <item>89</item>
        <item>92</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about touching a virtual key -->
    <integer-array name="config_virtualKeyVibePattern">
        <item>10</item>
        <item>65</item>
        <item>85</item>
        <item>95</item>
    </integer-array>

<!-- Pinned Apps. -->

    <!-- Should the pinner service pin the Camera application? -->
     <bool name="config_pinnerCameraApp">true</bool>

    <!-- Should the pinner service pin the Home application? -->
     <bool name="config_pinnerHomeApp">true</bool>

        <!-- Default files to pin via Pinner Service -->
    <string-array translatable="false" name="config_defaultPinnerServiceFiles">
        <item>/system/framework/services.jar</item>
        <item>/system/framework/oat/arm64/services.odex</item>
        <item>/system/framework/oat/arm/services.odex</item>
        <item>/system/framework/framework.jar</item>
        <item>/system/framework/arm64/boot-framework.oat</item>
        <item>/system/framework/arm/boot-framework.oat</item>
        <item>/apex/com.android.art/javalib/core-oj.jar</item>
        <item>/apex/com.android.art/javalib/core-libart.jar</item>
        <item>/apex/com.android.media/javalib/updatable-media.jar</item>
        <item>/system_ext/priv-app/SystemUI/SystemUI.apk</item>
        <item>/system_ext/priv-app/SystemUI/oat/arm64/SystemUI.odex</item>
        <item>/system/lib64/libsurfaceflinger.so</item>
        <item>/system/lib64/libRScpp.so</item>
        <item>/system/lib64/libRS.so</item>
        <item>/system/lib64/libRS_internal.so</item>
        <item>/system/lib64/libbcinfo.so</item>
        <item>/system/lib64/libRSDriver.so</item>
        <item>/system/lib64/libRSCpuRef.so</item>
        <item>/system/lib64/libblas.so</item>
    </string-array>

    <!-- List of files pinned by the Pinner Service with the JIT Zygote boot image b/119800099 -->
    <string-array translatable="false" name="config_jitzygoteBootImagePinnerServiceFiles">
        <item>/system/framework/framework.jar</item>
        <item>/system/framework/services.jar</item>
        <item>/apex/com.android.art/javalib/core-oj.jar</item>
        <item>/apex/com.android.art/javalib/core-libart.jar</item>
        <item>/apex/com.android.media/javalib/updatable-media.jar</item>
        <item>/system_ext/priv-app/SystemUI/SystemUI.apk</item>
        <item>/system/lib64/libsurfaceflinger.so</item>
    </string-array>

<!-- Haptic. -->

    <!-- The default intensity level for haptic feedback. See
         Settings.System.HAPTIC_FEEDBACK_INTENSITY more details on the constant values and
         meanings. -->

    <integer name="config_defaultHapticFeedbackIntensity">3</integer>
    <!-- The default intensity level for notification vibrations. See
         Settings.System.NOTIFICATION_VIBRATION_INTENSITY more details on the constant values and
         meanings. -->

    <integer name="config_defaultNotificationVibrationIntensity">3</integer>
    <!-- The default intensity level for notification vibrations. See
         Settings.System.RING_VIBRATION_INTENSITY more details on the constant values and
         meanings. -->
    <integer name="config_defaultRingVibrationIntensity">3</integer>

<!-- Extras. -->

     <!-- True if the device supports Sustained Performance Mode-->
      <bool name="config_sustainedPerformanceModeSupported">true</bool>

     <!-- Whether or not swipe up gesture's opt-in setting is available on this device -->
      <bool name="config_swipe_up_gesture_setting_available">true</bool>

     <!-- Shutdown if the battery temperature exceeds (this value * 0.1) Celsius. -->
     <integer name="config_shutdownBatteryTemperature">680</integer>

     <!-- When true use the linux /dev/input/event subsystem to detect the switch changes
         on the headphone/microphone jack. When false use the older uevent framework. -->
      <bool name="config_useDevInputEventForAudioJack">true</bool>

    <!-- List of biometric sensors on the device, in decreasing strength. Consumed by AuthService
         when registering authenticators with BiometricService. Format must be ID:Modality:Strength,
         where: IDs are unique per device, Modality as defined in BiometricAuthenticator.java,
         and Strength as defined in Authenticators.java -->
    <string-array name="config_biometric_sensors" translatable="false" >
        <!-- ID0:Fingerprint:Strong -->
        <item>0:2:15</item>
    </string-array>

    <!-- The default journal mode to use use when Write-Ahead Logging is not active.
         Choices are: OFF, DELETE, TRUNCATE, PERSIST and MEMORY.
         PERSIST may improve performance by reducing how often journal blocks are
         reallocated (compared to truncation) resulting in better data block locality
         and less churn of the storage media.
         The PERSIST mode results in data persisting in the journal beyond the life of
         a transaction, so it interacts poorly with SECURE_DELETE. -->
    <string name="db_default_journal_mode">MEMORY</string>

    <!-- The database synchronization mode when using the default journal mode.
         FULL is safest and preserves durability at the cost of extra fsyncs.
         NORMAL also preserves durability in non-WAL modes and uses checksums to ensure
         integrity although there is a small chance that an error might go unnoticed.
         Choices are: FULL, NORMAL, OFF. -->
    <string name="db_default_sync_mode">OFF</string>

    <!-- The database synchronization mode when using Write-Ahead Logging.
         From https://www.sqlite.org/pragma.html#pragma_synchronous:
         WAL mode is safe from corruption with synchronous=NORMAL, and probably DELETE mode is safe
         too on modern filesystems. WAL mode is always consistent with synchronous=NORMAL, but WAL
         mode does lose durability. A transaction committed in WAL mode with
         synchronous=NORMAL might roll back following a power loss or system crash.
         Transactions are durable across application crashes regardless of the synchronous setting
         or journal mode. The synchronous=NORMAL setting is a good choice for most applications
         running in WAL mode.
         Choices are: FULL, NORMAL, OFF. -->
    <string name="db_wal_sync_mode">OFF</string>

    <!-- Path to fast charging status file to detect whether an oem fast charger is active -->
    <string name="config_oemFastChargerStatusPath" translatable="false">/sys/class/power_supply/bms/fastcharge_mode</string>

</resources>
